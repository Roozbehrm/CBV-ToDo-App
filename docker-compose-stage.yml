

services:
  redis:
    container_name: redis
    image: redis
    restart: always
    ports:
      - "6379:6379"
    command: redis-server --save 60 1 --loglevel warning  


  backend:
    build: .
    container_name: todo
    command: sh -c "python manage.py makemigrations --noinput && \
                    python manage.py migrate --noinput && \
                    python manage.py collectstatic --noinput && \
                    gunicorn --bind 0.0.0.0:8000 core.wsgi:application"
    volumes:
      - ./core:/app
      - static_volume:/app/static
      - media_volume:/app/media
    expose:
      - "8000"
    environment:
      - SECRET_KEY=${SECRET_KEY}
      - DEBUG=${DEBUG}
      - SQL_ENGINE=${SQL_ENGINE}
      - SQL_DATABASE=${SQL_DATABASE}
      - SQL_USER=${SQL_USER}
      - SQL_PASSWORD=${SQL_PASSWORD}
      - SQL_HOST=${SQL_HOST}
      - SQL_PORT=${SQL_PORT}
      - EMAIL_PASSWORD=${EMAIL_PASSWORD}
    env_file:
      - path: ./.env
        required: false

    depends_on:
      - redis
      - db

  celery-worker:
    build: .
    command: celery -A core worker -l INFO
    volumes:
      - ./core:/app
    environment:
      - SECRET_KEY=${SECRET_KEY}
      - DEBUG=${DEBUG}
      - SQL_ENGINE=${SQL_ENGINE}
      - SQL_DATABASE=${SQL_DATABASE}
      - SQL_USER=${SQL_USER}
      - SQL_PASSWORD=${SQL_PASSWORD}
      - SQL_HOST=${SQL_HOST}
      - SQL_PORT=${SQL_PORT}
      - EMAIL_PASSWORD=${EMAIL_PASSWORD}
    env_file:
      - path: ./.env
        required: false

    depends_on:
      - backend

  celery-beat:
    build: .
    command: celery -A core beat -l INFO
    volumes:
      - ./core:/app
    environment:
      - SECRET_KEY=${SECRET_KEY}
      - DEBUG=${DEBUG}
      - SQL_ENGINE=${SQL_ENGINE}
      - SQL_DATABASE=${SQL_DATABASE}
      - SQL_USER=${SQL_USER}
      - SQL_PASSWORD=${SQL_PASSWORD}
      - SQL_HOST=${SQL_HOST}
      - SQL_PORT=${SQL_PORT}
      - EMAIL_PASSWORD=${EMAIL_PASSWORD}
    env_file:
      - path: ./.env
        required: false

    depends_on:
      - backend

  nginx: 
    image: nginx
    container_name: nginx
    ports:
      - "80:80"
    restart: always
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      - static_volume:/home/app/static
      - media_volume:/home/app/media
    depends_on:
      - backend
  db:
    image: postgres:16
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    env_file:
      - path: ./.env
        required: false

volumes:
  static_volume:
  media_volume:
  postgres_data:

 